import {AwingIoTDomainSharedEnumConstLinkType} from '../type';
import request from "@/requests/interface";
import { useGlobalSettingStore } from "@/store";
const ismock = useGlobalSettingStore().isMock;

const AppendOrUpdateTagLinkContact = (data:{provider:string;providerKey:string;linkSource:number;providerDisplayName:string;concurrencyStamp?:string;[key: string]: unknown;})=> {return request({url: "/IoT/link-contact/append-or-update-tag-link-contact",method:"post",ownMethod: "body",data: data,baseURL:ismock ?"/mock": undefined})};
const AppendOrUpdateTargetLinkContact = (data:{provider:string;providerKey:string;linkSource:number;providerDisplayName:string;concurrencyStamp?:string;[key: string]: unknown;})=> {return request({url: "/IoT/link-contact/append-or-update-target-link-contact",method:"post",ownMethod: "body",data: data,baseURL:ismock ?"/mock": undefined})};
const UpdateLinkContact = (data:{linkId:string;_params:{provider:string;};_body:{linkType:AwingIoTDomainSharedEnumConstLinkType;linkSource:number;providerDisplayName:string;concurrencyStamp:string;[key: string]: unknown;}})=> {return request({url: "/IoT/link-contact/link-contact/"+data.linkId+"?provider="+data._params.provider,method:"put",ownMethod: "undefined",data: data._body,baseURL:ismock ?"/mock": undefined})};
const UpdateBatchTagLinks = (data:{_params:{provider?:string;providerKey?:string;};_body:Array<{linkSource:number;providerDisplayName:string;concurrencyStamp:string;[key: string]: unknown;}>;})=> {return request({url: "/IoT/link-contact/batch-tag-links?provider="+data._params.provider+"&providerKey="+data._params.providerKey,method:"put",ownMethod: "undefined",data: data._body,baseURL:ismock ?"/mock": undefined})};
const UpdateBatchTargetLinks = (data:{_params:{provider?:string;providerKey?:string;};_body:Array<{linkSource:number;providerDisplayName:string;concurrencyStamp:string;[key: string]: unknown;}>;})=> {return request({url: "/IoT/link-contact/batch-target-links?provider="+data._params.provider+"&providerKey="+data._params.providerKey,method:"put",ownMethod: "undefined",data: data._body,baseURL:ismock ?"/mock": undefined})};
const GetLinkInfoById = (data:{linkId:string;_params:{provider?:string;};})=> {return request({url: "/IoT/link-contact/link-info-by-id/"+data.linkId,method:"get",ownMethod: "undefined",params: data._params,baseURL:ismock ?"/mock": undefined})};
const RemoveByLinkId = (data:{Provider:string;LinkId:string;})=> {return request({url: "/IoT/link-contact/by-link-id",method:"delete",ownMethod: "undefined",params: data,baseURL:ismock ?"/mock": undefined})};
const RemoveTagLinkContactByProvider = (data:{Provider:string;ProviderKey:string;})=> {return request({url: "/IoT/link-contact/tag-link-contact-by-provider",method:"delete",ownMethod: "undefined",params: data,baseURL:ismock ?"/mock": undefined})};
const RemoveTargetLinkContactByProvider = (data:{Provider:string;ProviderKey:string;})=> {return request({url: "/IoT/link-contact/target-link-contact-by-provider",method:"delete",ownMethod: "undefined",params: data,baseURL:ismock ?"/mock": undefined})};
const GetTagLinkContactList = (data:{Provider:string;ProviderKey:string;ProviderDisplayName?:string;getValue?:boolean;})=> {return request({url: "/IoT/link-contact/tag-link-contact-list",method:"get",ownMethod: "undefined",params: data,baseURL:ismock ?"/mock": undefined})};
const GetLinkTagContactPageList = (data:{Provider?:string;ProviderKey?:string;ProviderDisplayName?:string;SkipCount?:number;MaxResultCount?:number;})=> {return request({url: "/IoT/link-contact/link-tag-contact-page-list",method:"get",ownMethod: "undefined",params: data,baseURL:ismock ?"/mock": undefined})};
const GetTargetLinkContactList = (data:{Provider:string;ProviderKey:string;ProviderDisplayName?:string;getValue?:boolean;})=> {return request({url: "/IoT/link-contact/target-link-contact-list",method:"get",ownMethod: "undefined",params: data,baseURL:ismock ?"/mock": undefined})};
const GetLinkTargetContactPageList = (data:{Provider?:string;ProviderKey?:string;ProviderDisplayName?:string;SkipCount?:number;MaxResultCount?:number;})=> {return request({url: "/IoT/link-contact/link-target-contact-page-list",method:"get",ownMethod: "undefined",params: data,baseURL:ismock ?"/mock": undefined})};
const GetLinkContactList = (data:{Provider:string;ProviderKey:string;LinkSource?:number;ProviderDisplayName?:string;})=> {return request({url: "/IoT/link-contact/link-contact-list",method:"get",ownMethod: "undefined",params: data,baseURL:ismock ?"/mock": undefined})};

const apis = {AppendOrUpdateTagLinkContact,AppendOrUpdateTargetLinkContact,UpdateLinkContact,UpdateBatchTagLinks,UpdateBatchTargetLinks,GetLinkInfoById,RemoveByLinkId,RemoveTagLinkContactByProvider,RemoveTargetLinkContactByProvider,GetTagLinkContactList,GetLinkTagContactPageList,GetTargetLinkContactList,GetLinkTargetContactPageList,GetLinkContactList};
export default apis;